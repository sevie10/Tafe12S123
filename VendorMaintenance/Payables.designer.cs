#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VendorMaintenance
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Payables")]
	public partial class PayablesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertVendor(Vendor instance);
    partial void UpdateVendor(Vendor instance);
    partial void DeleteVendor(Vendor instance);
    partial void InsertState(State instance);
    partial void UpdateState(State instance);
    partial void DeleteState(State instance);
    partial void InsertTerm(Term instance);
    partial void UpdateTerm(Term instance);
    partial void DeleteTerm(Term instance);
    partial void InsertGLAccount(GLAccount instance);
    partial void UpdateGLAccount(GLAccount instance);
    partial void DeleteGLAccount(GLAccount instance);
    #endregion
		
		public PayablesDataContext() : 
				base(global::VendorMaintenance.Properties.Settings.Default.PayablesConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PayablesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PayablesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PayablesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PayablesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Vendor> Vendors
		{
			get
			{
				return this.GetTable<Vendor>();
			}
		}
		
		public System.Data.Linq.Table<State> States
		{
			get
			{
				return this.GetTable<State>();
			}
		}
		
		public System.Data.Linq.Table<Term> Terms
		{
			get
			{
				return this.GetTable<Term>();
			}
		}
		
		public System.Data.Linq.Table<GLAccount> GLAccounts
		{
			get
			{
				return this.GetTable<GLAccount>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Vendors")]
	public partial class Vendor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VendorID;
		
		private string _Name;
		
		private string _Address1;
		
		private string _Address2;
		
		private string _City;
		
		private string _State;
		
		private string _ZipCode;
		
		private string _Phone;
		
		private string _ContactLName;
		
		private string _ContactFName;
		
		private int _DefaultTermsID;
		
		private int _DefaultAccountNo;
		
		private EntityRef<State> _State1;
		
		private EntityRef<Term> _Term;
		
		private EntityRef<GLAccount> _GLAccount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVendorIDChanging(int value);
    partial void OnVendorIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnZipCodeChanging(string value);
    partial void OnZipCodeChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnContactLNameChanging(string value);
    partial void OnContactLNameChanged();
    partial void OnContactFNameChanging(string value);
    partial void OnContactFNameChanged();
    partial void OnDefaultTermsIDChanging(int value);
    partial void OnDefaultTermsIDChanged();
    partial void OnDefaultAccountNoChanging(int value);
    partial void OnDefaultAccountNoChanged();
    #endregion
		
		public Vendor()
		{
			this._State1 = default(EntityRef<State>);
			this._Term = default(EntityRef<Term>);
			this._GLAccount = default(EntityRef<GLAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VendorID
		{
			get
			{
				return this._VendorID;
			}
			set
			{
				if ((this._VendorID != value))
				{
					this.OnVendorIDChanging(value);
					this.SendPropertyChanging();
					this._VendorID = value;
					this.SendPropertyChanged("VendorID");
					this.OnVendorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address2", DbType="VarChar(50)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="Char(2) NOT NULL", CanBeNull=false)]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					if (this._State1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZipCode", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string ZipCode
		{
			get
			{
				return this._ZipCode;
			}
			set
			{
				if ((this._ZipCode != value))
				{
					this.OnZipCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipCode = value;
					this.SendPropertyChanged("ZipCode");
					this.OnZipCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(10)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactLName", DbType="VarChar(50)")]
		public string ContactLName
		{
			get
			{
				return this._ContactLName;
			}
			set
			{
				if ((this._ContactLName != value))
				{
					this.OnContactLNameChanging(value);
					this.SendPropertyChanging();
					this._ContactLName = value;
					this.SendPropertyChanged("ContactLName");
					this.OnContactLNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactFName", DbType="VarChar(50)")]
		public string ContactFName
		{
			get
			{
				return this._ContactFName;
			}
			set
			{
				if ((this._ContactFName != value))
				{
					this.OnContactFNameChanging(value);
					this.SendPropertyChanging();
					this._ContactFName = value;
					this.SendPropertyChanged("ContactFName");
					this.OnContactFNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultTermsID", DbType="Int NOT NULL")]
		public int DefaultTermsID
		{
			get
			{
				return this._DefaultTermsID;
			}
			set
			{
				if ((this._DefaultTermsID != value))
				{
					if (this._Term.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDefaultTermsIDChanging(value);
					this.SendPropertyChanging();
					this._DefaultTermsID = value;
					this.SendPropertyChanged("DefaultTermsID");
					this.OnDefaultTermsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultAccountNo", DbType="Int NOT NULL")]
		public int DefaultAccountNo
		{
			get
			{
				return this._DefaultAccountNo;
			}
			set
			{
				if ((this._DefaultAccountNo != value))
				{
					if (this._GLAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDefaultAccountNoChanging(value);
					this.SendPropertyChanging();
					this._DefaultAccountNo = value;
					this.SendPropertyChanged("DefaultAccountNo");
					this.OnDefaultAccountNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_Vendor", Storage="_State1", ThisKey="State", OtherKey="StateCode", IsForeignKey=true)]
		public State State1
		{
			get
			{
				return this._State1.Entity;
			}
			set
			{
				State previousValue = this._State1.Entity;
				if (((previousValue != value) 
							|| (this._State1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State1.Entity = null;
						previousValue.Vendors.Remove(this);
					}
					this._State1.Entity = value;
					if ((value != null))
					{
						value.Vendors.Add(this);
						this._State = value.StateCode;
					}
					else
					{
						this._State = default(string);
					}
					this.SendPropertyChanged("State1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Term_Vendor", Storage="_Term", ThisKey="DefaultTermsID", OtherKey="TermsID", IsForeignKey=true)]
		public Term Term
		{
			get
			{
				return this._Term.Entity;
			}
			set
			{
				Term previousValue = this._Term.Entity;
				if (((previousValue != value) 
							|| (this._Term.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Term.Entity = null;
						previousValue.Vendors.Remove(this);
					}
					this._Term.Entity = value;
					if ((value != null))
					{
						value.Vendors.Add(this);
						this._DefaultTermsID = value.TermsID;
					}
					else
					{
						this._DefaultTermsID = default(int);
					}
					this.SendPropertyChanged("Term");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GLAccount_Vendor", Storage="_GLAccount", ThisKey="DefaultAccountNo", OtherKey="AccountNo", IsForeignKey=true)]
		public GLAccount GLAccount
		{
			get
			{
				return this._GLAccount.Entity;
			}
			set
			{
				GLAccount previousValue = this._GLAccount.Entity;
				if (((previousValue != value) 
							|| (this._GLAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GLAccount.Entity = null;
						previousValue.Vendors.Remove(this);
					}
					this._GLAccount.Entity = value;
					if ((value != null))
					{
						value.Vendors.Add(this);
						this._DefaultAccountNo = value.AccountNo;
					}
					else
					{
						this._DefaultAccountNo = default(int);
					}
					this.SendPropertyChanged("GLAccount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.States")]
	public partial class State : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _StateCode;
		
		private string _StateName;
		
		private int _FirstZipCode;
		
		private int _LastZipCode;
		
		private EntitySet<Vendor> _Vendors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStateCodeChanging(string value);
    partial void OnStateCodeChanged();
    partial void OnStateNameChanging(string value);
    partial void OnStateNameChanged();
    partial void OnFirstZipCodeChanging(int value);
    partial void OnFirstZipCodeChanged();
    partial void OnLastZipCodeChanging(int value);
    partial void OnLastZipCodeChanged();
    #endregion
		
		public State()
		{
			this._Vendors = new EntitySet<Vendor>(new Action<Vendor>(this.attach_Vendors), new Action<Vendor>(this.detach_Vendors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateCode", DbType="Char(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string StateCode
		{
			get
			{
				return this._StateCode;
			}
			set
			{
				if ((this._StateCode != value))
				{
					this.OnStateCodeChanging(value);
					this.SendPropertyChanging();
					this._StateCode = value;
					this.SendPropertyChanged("StateCode");
					this.OnStateCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string StateName
		{
			get
			{
				return this._StateName;
			}
			set
			{
				if ((this._StateName != value))
				{
					this.OnStateNameChanging(value);
					this.SendPropertyChanging();
					this._StateName = value;
					this.SendPropertyChanged("StateName");
					this.OnStateNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstZipCode", DbType="Int NOT NULL")]
		public int FirstZipCode
		{
			get
			{
				return this._FirstZipCode;
			}
			set
			{
				if ((this._FirstZipCode != value))
				{
					this.OnFirstZipCodeChanging(value);
					this.SendPropertyChanging();
					this._FirstZipCode = value;
					this.SendPropertyChanged("FirstZipCode");
					this.OnFirstZipCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastZipCode", DbType="Int NOT NULL")]
		public int LastZipCode
		{
			get
			{
				return this._LastZipCode;
			}
			set
			{
				if ((this._LastZipCode != value))
				{
					this.OnLastZipCodeChanging(value);
					this.SendPropertyChanging();
					this._LastZipCode = value;
					this.SendPropertyChanged("LastZipCode");
					this.OnLastZipCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_Vendor", Storage="_Vendors", ThisKey="StateCode", OtherKey="State")]
		public EntitySet<Vendor> Vendors
		{
			get
			{
				return this._Vendors;
			}
			set
			{
				this._Vendors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Vendors(Vendor entity)
		{
			this.SendPropertyChanging();
			entity.State1 = this;
		}
		
		private void detach_Vendors(Vendor entity)
		{
			this.SendPropertyChanging();
			entity.State1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Terms")]
	public partial class Term : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TermsID;
		
		private string _Description;
		
		private short _DueDays;
		
		private EntitySet<Vendor> _Vendors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTermsIDChanging(int value);
    partial void OnTermsIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDueDaysChanging(short value);
    partial void OnDueDaysChanged();
    #endregion
		
		public Term()
		{
			this._Vendors = new EntitySet<Vendor>(new Action<Vendor>(this.attach_Vendors), new Action<Vendor>(this.detach_Vendors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TermsID
		{
			get
			{
				return this._TermsID;
			}
			set
			{
				if ((this._TermsID != value))
				{
					this.OnTermsIDChanging(value);
					this.SendPropertyChanging();
					this._TermsID = value;
					this.SendPropertyChanged("TermsID");
					this.OnTermsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DueDays", DbType="SmallInt NOT NULL")]
		public short DueDays
		{
			get
			{
				return this._DueDays;
			}
			set
			{
				if ((this._DueDays != value))
				{
					this.OnDueDaysChanging(value);
					this.SendPropertyChanging();
					this._DueDays = value;
					this.SendPropertyChanged("DueDays");
					this.OnDueDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Term_Vendor", Storage="_Vendors", ThisKey="TermsID", OtherKey="DefaultTermsID")]
		public EntitySet<Vendor> Vendors
		{
			get
			{
				return this._Vendors;
			}
			set
			{
				this._Vendors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Vendors(Vendor entity)
		{
			this.SendPropertyChanging();
			entity.Term = this;
		}
		
		private void detach_Vendors(Vendor entity)
		{
			this.SendPropertyChanging();
			entity.Term = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GLAccounts")]
	public partial class GLAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccountNo;
		
		private string _Description;
		
		private EntitySet<Vendor> _Vendors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountNoChanging(int value);
    partial void OnAccountNoChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public GLAccount()
		{
			this._Vendors = new EntitySet<Vendor>(new Action<Vendor>(this.attach_Vendors), new Action<Vendor>(this.detach_Vendors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AccountNo
		{
			get
			{
				return this._AccountNo;
			}
			set
			{
				if ((this._AccountNo != value))
				{
					this.OnAccountNoChanging(value);
					this.SendPropertyChanging();
					this._AccountNo = value;
					this.SendPropertyChanged("AccountNo");
					this.OnAccountNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GLAccount_Vendor", Storage="_Vendors", ThisKey="AccountNo", OtherKey="DefaultAccountNo")]
		public EntitySet<Vendor> Vendors
		{
			get
			{
				return this._Vendors;
			}
			set
			{
				this._Vendors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Vendors(Vendor entity)
		{
			this.SendPropertyChanging();
			entity.GLAccount = this;
		}
		
		private void detach_Vendors(Vendor entity)
		{
			this.SendPropertyChanging();
			entity.GLAccount = null;
		}
	}
}
#pragma warning restore 1591
